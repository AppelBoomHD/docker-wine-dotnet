name: CI to Docker Hub 

on:
  push:
    #tags:
    #  - "*"
jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v2
      - name: Branch name
        id: branch_name
        run: |
          echo "Cur ref: $GITHUB_REF"
          export SOURCE_NAME=${GITHUB_REF#refs/*/}
          export SOURCE_BRANCH=${GITHUB_REF#refs/heads/}
          export SOURCE_TAG=${GITHUB_REF#refs/tags/}
          echo "Parsed: name=$SOURCE_NAME, branch=$SOURCE_BRANCH, tag=$SOURCE_TAG"
          echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
          DOCKER_TAG="latest"
          if [[ "$SOURCE_NAME" != "$GITHUB_REF" ]]; then
            if [[ "$SOURCE_NAME" != "master" ]]; then
              DOCKER_TAG="$SOURCE_NAME"
            fi
          fi
          echo "Final Docker Tag: $DOCKER_TAG"
          echo ::set-output name=DOCKER_TAG::$DOCKER_TAG
      -       
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      -     
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - 
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./ 
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: nyamisty/docker-wine-dotnet:${{ steps.branch_name.outputs.DOCKER_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      -
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
